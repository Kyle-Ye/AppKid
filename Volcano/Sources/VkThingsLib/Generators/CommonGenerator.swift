//
//  CommonGenerator.swift
//  Volcano
//
//  Created by Serhii Mumriak on 29.06.2023
//

import Foundation
import SemanticVersion
import TinyFoundation
import Yams

public let kMetadataSerializedPrefix = "// #*# "
internal let kIndentationUnit = String(repeating: " ", count: 4)

public protocol Generator {
    func resultString(with parser: __shared Parser) throws -> String
    var license: String { get }
}

public extension Generator {
    func write(to fileURL: URL, parser: __shared Parser) throws {
        try resultString(with: parser).write(to: fileURL, atomically: true, encoding: .utf8)
    }

    func header(from parser: __shared Parser) throws -> String {
        var metadataHeader = MetadataHeader_v1()
        metadataHeader.vulkanVersion = parser.version

        let yamlEncoder = YAMLEncoder()
        let metadata = try yamlEncoder.encode(metadataHeader)
            .components(separatedBy: .newlines)
            .filter { $0.isEmpty == false }
            .map { kMetadataSerializedPrefix + $0 }
            .joined(separator: .newline)
            
        return
            """
            // WARNING: DO NOT MODIFY
            // This file is generated by vkthings tool
            \(metadata)
            \(license)
            """
    }
}

public enum MetadataVersion: Int, Codable {
    case v1 = 1
}

public struct MetadataHeaderVersionCheck: Decodable {
    public var version: MetadataVersion

    public enum CodingKeys: String, CodingKey {
        case version = "Metadata version"
    }
}

public struct MetadataHeader_v1: Codable {
    public enum Error: Swift.Error {
        case dateNotParsable
        case vulkanVersionNotParsable
    }

    public enum CodingKeys: String, CodingKey {
        case version = "Metadata version"
        case dateGenerated = "Date generated"
        case vulkanVersion = "Vulkan Version"
    }

    public var version: MetadataVersion = .v1
    public var dateGenerated: Date = .now
    public var vulkanVersion: SemanticVersion = SemanticVersion(0, 0, 0)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        
        try container.encode(version, forKey: .version)

        let dateString = DateFormatter.header.string(from: dateGenerated)
        try container.encode(dateString, forKey: .dateGenerated)

        let versionString = "\(vulkanVersion.major).\(vulkanVersion.minor).\(vulkanVersion.patch)"
        try container.encode(versionString, forKey: .vulkanVersion)
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        
        self.version = try values.decode(.version)

        let dateString: String = try values.decode(.dateGenerated)
        if let date = DateFormatter.header.date(from: dateString) {
            self.dateGenerated = date
        } else {
            throw Error.dateNotParsable
        }

        let vulkanVersion: String = try values.decode(.vulkanVersion)
        if let apiVersion = SemanticVersion(vulkanVersion) {
            self.vulkanVersion = apiVersion
        } else {
            throw Error.vulkanVersionNotParsable
        }
    }

    public init() {}
}
