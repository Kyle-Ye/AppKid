//
//  BorderRoundedFragmentShader.volcano
//  ContentAnimation
//
//  Created by Serhii Mumriak on 10.06.2021.
//

#version 450
#pragma shader_stage(fragment)

#include "Rectangle.h"

@in vec2 textureCoordinates;
@in LayerRenderDescriptor layer;

@out vec4 outColor;

void main() 
{
    vec2 measuredPoint = textureCoordinates * layer.bounds.zw;
    float distanceToRect = distanceToRoundedRect(measuredPoint, layer.bounds, layer.cornerRadius, vec2(0.0));
    float distanceToTest = distanceToRect - layer.cornerRadius;

    // this line must not be inside the distant testing if
    float antialiasingMask = clamp(-distanceToTest / fwidth(distanceToTest), 0.0, 1.0);
    float a2 = clamp((distanceToTest + layer.borderWidth) / fwidth(distanceToTest + layer.borderWidth), 0.0, 1.0);
        
    if (distanceToTest <= 0.0 && distanceToTest + layer.borderWidth >= 0.0) {
        outColor = vec4(layer.borderColor.rgb, layer.borderColor.a * antialiasingMask * a2);
    } else {
        outColor = vec4(0.0);
    }

    // vec2 measuredPoint = textureCoordinates * layer.bounds.zw;
    // float distanceToRectExternal = distanceToRoundedRect(measuredPoint, layer.bounds, layer.cornerRadius, vec2(0.0)) - layer.cornerRadius;
    // float distanceToRectInternal = distanceToRoundedRect(measuredPoint, layer.bounds, layer.cornerRadius, layer.borderWidth.xx) - layer.cornerRadius;

    // float antialiasingMaskExternal = clamp(0.5 - distanceToRectExternal, 0.0, 1.0) - 1.0;
    // float antialiasingMaskInternal = clamp(0.5 - distanceToRectInternal, 0.0, 1.0);

    // // float a = antialiasingMaskExternal;
    // // float a = antialiasingMaskInternal;
    // float a = mix(1.0, antialiasingMaskExternal, distanceToRectInternal);
    // outColor = vec4(a.xxx, 0.0);
    // // outColor = vec4(layer.borderColor.rgb, layer.borderColor.a * a);
}
