//
//  BackgroundFragmentShader.volcano
//  AppKid
//
//  Created by Serhii Mumriak on 10.06.2021.
//

#version 450
#pragma shader_stage(fragment)
#extension GL_ARB_separate_shader_objects : enable

#include "Rectangle.h"

@in vec2 textureCoordinates;
@in LayerRenderDescriptor layer;

@out vec4 outColor;

void main() 
{
    vec2 measuredPoint = textureCoordinates * layer.bounds.zw;
    if (layer.cornerRadius > 0.0) 
    {
        float distanceToRect = distanceToRoundedRect(measuredPoint, layer.bounds, layer.cornerRadius, vec2(0.0));
        float distanceToTest = distanceToRect - layer.cornerRadius;

        if (layer.borderWidth > 0.0 && layer.borderColor.a == 1.0) {
            distanceToTest += layer.borderWidth * 0.5;
        }

        // this line must not be inside the distant testing if
        float antialiasingMask = clamp(-distanceToTest / fwidth(distanceToTest), 0.0, 1.0);
        outColor = vec4(layer.backgroundColor.rgb, layer.backgroundColor.a * antialiasingMask);
    }
    else 
    {
        float distanceToRect = distanceToRoundedRect(measuredPoint, layer.bounds, 0.0, vec2(0.5));
        float distanceToTest = distanceToRect;

        // if (layer.borderWidth > 0.0 && layer.borderColor.a == 1.0) {
        //     distanceToTest += layer.borderWidth * 0.5;
        // }

        // this line must not be inside the distant testing if
        float antialiasingMask = 1.0 - clamp(distanceToTest / fwidth(distanceToTest), 0.0, 1.0);
        outColor = vec4(layer.backgroundColor.rgb, layer.backgroundColor.a * antialiasingMask);
    }
}
