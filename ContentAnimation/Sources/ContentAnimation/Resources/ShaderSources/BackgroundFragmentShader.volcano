//
//  BackgroundFragmentShader.volcano
//  AppKid
//
//  Created by Serhii Mumriak on 10.06.2021.
//

#version 450
#pragma shader_stage(fragment)
#extension GL_ARB_separate_shader_objects : enable

#include "Rectangle.h"

@in vec2 textureCoordinates;
@in LayerRenderDescriptor layer;

@out vec4 outColor;

void main() 
{
    if (layer.cornerRadius > 0.0) 
    {
        // vec2 cornerRadiusNormalized = layer.cornerRadius / layer.bounds.zw;
        // vec2 pointOnRectangleNormalized = clamp(textureCoordinates, cornerRadiusNormalized, vec2(1.0) - cornerRadiusNormalized);
        // float distanceToRectNormalized = distance(textureCoordinates, pointOnRectangleNormalized);

        // i have no idea to which value i should compare the distance in 0.0-1.0 coordinate range, so using real pixel values below
        // probably need to remap size of the layer so box axis are not in 0.0-1.0 range, but rather rescale based on relationship of width and height

        // define rectangle points to measure distances to
        vec2 measuredPoint = textureCoordinates * layer.bounds.zw;

        // closes point on innder rectangle of the layer with rounded corners        
        vec2 pointOnRectangle = clamp(measuredPoint, layer.cornerRadius.xx, layer.bounds.zw - layer.cornerRadius);
        
        // this is a signed distance field from fragment to inner rectangle of the layer with rounded corners
        float distanceToRect = distance(measuredPoint, pointOnRectangle);
        float distanceToTest = distanceToRect - layer.cornerRadius;

        // this line must not be inside the distant testing if
        float antialiasingMask = clamp(-distanceToTest / fwidth(distanceToTest), 0.0, 1.0);

        if (distanceToTest <= 0.0) {
            outColor = vec4(layer.backgroundColor.rgb, layer.backgroundColor.a * antialiasingMask);
        } else {
            outColor = vec4(0);
        }
    }
    else 
    {
        outColor = layer.backgroundColor;
    }
}
